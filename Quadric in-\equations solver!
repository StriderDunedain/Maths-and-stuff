# Solver of quadric in-/equations!

print('Welcome to the solver of quadric equations (and inequations)!')
a = input('a = ')
b = input('b = ')
c = input('c = ')
if a.count('.') == 1:
    a = float(a)
else:
    a = int(a)
if b.count('.') == 1:
    b = float(b)
else:
    b = int(b)
if c.count('.') == 1:
    c = float(c)
else:
    c = int(c)

normal_sqrts = {'√8':'2√2', '√12':'2√3', '√18':'3√2', '√20':'2√5', '√24':'2√6',
                 '√27':'3√3', '√28':'2√7', '√32':'4√2', '√40':'2√10', '√44':'2√11', 
                 '√45':'3√5', '√48':'4√3', '√52':'2√13', '√54':'3√6', '√56':'2√14', 
                 '√60':'2√15', '√63':'3√7', '√68':'2√17', '√72':'6√2', '√76':'2√19',
                 '√80':'4√5', '√84':'2√11', '√88':'2√22', '√90':'3√10', '√92':'2√23',
                 '√96':'4√6', '√99':'3√11'}

lst_sqrt = [1.4142135623730951, 1.7320508075688772, 2.23606797749979,
            2.449489742783178, 2.6457513110645907, 2.8284271247461903,
            3.1622776601683795, 3.3166247903554, 3.4641016151377544, 
            3.605551275463989, 3.7416573867739413, 3.872983346207417,
            4.123105625617661, 4.242640687119285, 4.358898943540674,
            4.47213595499958, 4.58257569495584, 4.69041575982343, 
            4.795831523312719, 4.898979485566356, 5.0990195135927845, 
            5.196152422706632, 5.291502622129181, 5.385164807134504, 
            5.477225575051661, 5.5677643628300215, 5.656854249492381, 
            5.744562646538029, 5.830951894845301, 5.916079783099616,
            6.082762530298219, 6.164414002968976, 6.244997998398398,
            6.324555320336759, 6.4031242374328485, 6.48074069840786, 
            6.557438524302, 6.6332495807108, 6.708203932499369, 
            6.782329983125268, 6.855654600401044, 6.928203230275509,
            7.0710678118654755, 7.14142842854285, 7.211102550927978,
            7.280109889280518, 7.3484692283495345, 7.416198487095663,
            7.483314773547883, 7.54983443527075, 7.615773105863909,
            7.681145747868608, 7.745966692414834, 7.810249675906654,
            7.874007874011811, 7.937253933193772, 8.06225774829855, 
            8.12403840463596, 8.18535277187245, 8.246211251235321, 
            8.306623862918075, 8.366600265340756, 8.426149773176359, 
            8.48528137423857, 8.54400374531753, 8.602325267042627, 
            8.660254037844387, 8.717797887081348, 8.774964387392123, 
            8.831760866327848, 8.888194417315589, 8.94427190999916,
            9.055385138137417, 9.1104335791443, 9.16515138991168, 
            9.219544457292887, 9.273618495495704, 9.327379053088816, 
            9.38083151964686, 9.433981132056603, 9.486832980505138, 
            9.539392014169456, 9.591663046625438, 9.643650760992955, 
            9.695359714832659, 9.746794344808963, 9.797958971132712, 
            9.848857801796104, 9.899494936611665, 9.9498743710662]

D = b**2 - 4*a*c
if D < 0:
    print('No answer! Discriminant < 0!')
    exit()
x_1 = (-b - D**0.5)/(2*a)
x_2 = (-b + D**0.5)/(2*a)

if x_1 > x_2:
    less = x_2
    more = x_1
    x = a*(x_2 - 1)**2 + b*(x_2 - 1) + c
elif x_1 == x_2:
    less = x_1
    more = x_1
    x = a*(x_1 - 1)**2 + b*(x_1 - 1) + c
else:
    less = x_1
    more = x_2
    x = a*(x_1 - 1)**2 + b*(x_2 - 1) + c

if D**0.5 in lst_sqrt:
    print('Since Discriminant is an irrational number D = √' + str(D))
    # Roots
    if '√' + str(D) in normal_sqrts.keys():
        divided = (normal_sqrts.get('√'+str(D))).split('√')
        if (b % 2 == 0) and (int(divided[0]) % 2 == 0) and ((2*a) % 2 == 0) and (b != 0):
            x_root_1 = '{b} - √{D}'.format(b=int(b/2), D=int(divided[1]))
            x_root_2 = '{b} + √{D}'.format(b=int(b/2), D=int(divided[1]))
            print('x_1 = ' + x_root_1)
            print('x_2 = ' + x_root_2)
        else:
            x_r_1 = '{b} - √{D}/{d}'.format(b=-b, D=D, d=2*a)
            x_r_2 = '{b} + √{D}/{d}'.format(b=-b, D=D, d=2*a)
            print('x_1 = ' + x_r_1)
            print('x_2 = ' + x_r_2)
    choice = input('Print Discriminant as a number? y/n ')
    if choice == 'y':
        print('D = ' + str(round(D**0.5, 5)))
    choice_1 = input('Print the Xs as numbers? y/n ')
    if choice_1 == 'y':
        print('x_1 = ' + str(round(x_1, 5)))
        print('x_2 = ' + str(round(x_2, 5)))
else:
    try:
        print('Discriminant = ' + str(D))
        if x_1 == x_2:
            print('Both Xs are the same and equal to ' + str(x_1))
        else:
            print('x_1 = ' + str(x_1))
            print('x_2 = ' + str(x_2))
    except ZeroDivisionError:
        print('Why did you put a linear equation in the solver of QUADRIC ones?')

choice_2 = input('Solve as an inequation? y/n ')
if choice_2 == 'y':
    num = input('What is your sign? > / >= / < / =< ')
    if num == '>':
        if x < 0:
            print('The answer to the inequality is the period between ({x} ; {y})'.format(x=less, y=more))
        else:
            print('The answer to the inequality is from (-infinity ; {x}) U ({y} ; +infinity)'.format(x=less, y=more))
    elif num == '>=':
        if x < 0:
            print('The answer to the inequality is the period between [{x} ; {y}]'.format(x=less, y=more))
        else:
            print('The answer to the inequation is from (-infinity ; {x}] U [{y} ; +infinity)'.format(x=less, y=more))
    elif num == '<':
        if x < 0:
            print('The answer to the inequality is from (-infinity ; {x}) U ({y} ; +infinity)'.format(x=less, y=more))
        else:
            print('The answer to the inequality is the period between ({x} ; {y})'.format(x=less, y=more))
    elif num == '=<':
        if x < 0:
            print('The answer to the inequation is from (-infinity ; {x}] U [{y} ; +infinity)'.format(x=less, y=more))
        else:
            print('The answer to the inequality is the period between [{x} ; {y}]'.format(x=less, y=more))
else:
    print('Okay!)')
